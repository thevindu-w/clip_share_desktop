name: Build-and-Test
run-name: Build and Test on ${{ github.sha }}

on:
  push:
    branches:
    - master
    paths:
    - 'src/**'
    - '!src/res/**'
    - 'src/res/**/*.c'
    - 'src/res/**/*.h'
    - 'tests/**'
    - 'Makefile'
    - 'docker/*'
    - '.github/workflows/build-test.yml'
  pull_request:
    branches:
    - master
  workflow_call:
    inputs:
      trigger:
        type: string
        required: false
        default: workflow_call

jobs:
  Style-Check:
    uses: ./.github/workflows/check-style.yml
    with:
      trigger: "${{ inputs.trigger || github.event_name }}"
    permissions:
      contents: write
      pull-requests: write

  Test-on-Linux:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: Style-Check

    strategy:
      matrix:
        distro:
        - ubuntu
        - fedora
        - arch
        exclude:
        - distro: ${{ (github.event_name == 'push') && (inputs.trigger != 'workflow_call') && 'fedora' }}
        - distro: ${{ (github.event_name == 'push') && (inputs.trigger != 'workflow_call') && 'arch' }}

    steps:
    - name: Check out repository code
      uses: actions/checkout@v5
      with:
        ref: ${{ github.ref }}

    - name: Build
      run: docker build -t clipshare -f docker/Dockerfile --build-arg "DISTRO=${{matrix.distro}}" .

    - name: Test
      run: docker run clipshare

  Test-on-Windows:
    runs-on: windows-latest
    timeout-minutes: 20
    needs: Style-Check

    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: CLANG64
        update: false
        install: >-
          mingw-w64-clang-x86_64-clang
          mingw-w64-clang-x86_64-libunistring
          make
          python
          diffutils
          findutils
          curl
          sed
          vim
          unzip

    - name: Set variables
      run: |
        OPENSSL_PATH=/c/msys64/openssl-x86_64
        echo OPENSSL_PATH="$OPENSSL_PATH" >> "$GITHUB_ENV"
        LIBMICROHTTPD_PATH=/c/msys64/libmicrohttpd-x86_64
        echo LIBMICROHTTPD_PATH="$LIBMICROHTTPD_PATH" >> "$GITHUB_ENV"
        echo CPATH="${OPENSSL_PATH}/include:${LIBMICROHTTPD_PATH}/include" >> "$GITHUB_ENV"
        echo LIBRARY_PATH="${OPENSSL_PATH}/lib64:${LIBMICROHTTPD_PATH}/lib" >> "$GITHUB_ENV"

    - name: Setup OpenSSL
      id: cache-openssl
      uses: actions/cache@v4
      with:
        path: C:\msys64\openssl-x86_64
        key: openssl-windows-x86_64

    - name: Build OpenSSL
      if: ${{ steps.cache-openssl.outputs.cache-hit != 'true' }}
      run: |
        curl -OL https://github.com/openssl/openssl/releases/download/openssl-3.5.0/openssl-3.5.0.tar.gz
        if [ "$(sha256sum -b openssl-3.5.0.tar.gz | cut -d ' ' -f 1)" != \
            '344d0a79f1a9b08029b0744e2cc401a43f9c90acd1044d09a530b4885a8e9fc0' ]; then
          echo OpenSSL hash mismatch
          exit 1
        fi
        tar -xzf openssl-3.5.0.tar.gz
        mkdir "$OPENSSL_PATH"
        cd openssl-3.5.0
        CC=clang ./Configure zlib no-zlib-dynamic no-brotli no-zstd no-shared no-tests no-docs \
        --prefix="$OPENSSL_PATH" mingw64
        make -j4
        make install
        cd ..
        rm -rf openssl-3.5.0*

    - name: Setup PatchPE
      id: cache-patchpe
      uses: actions/cache@v4
      with:
        path: C:\msys64\PatchPE.exe
        key: patchpe-windows-x86_64

    - name: Download PatchPE
      if: ${{ steps.cache-patchpe.outputs.cache-hit != 'true' }}
      run: |
        curl -OL https://github.com/datadiode/PatchPE/releases/download/2.04/PatchPE.exe
        if [ "$(sha256sum -b PatchPE.exe | cut -d ' ' -f 1)" != \
            '77f81c7335a8ddc86a79315425ea6b9e4e165a53540db567ea46ef01eab2aa97' ]; then
          echo PatchPE hash mismatch
          exit 1
        fi
        mv PatchPE.exe /c/msys64/PatchPE.exe

    - name: Setup libmicrohttpd
      id: cache-libmicrohttpd
      uses: actions/cache@v4
      with:
        path: C:\msys64\libmicrohttpd-x86_64
        key: libmicrohttpd-windows-x86_64

    - name: Download libmicrohttpd
      if: ${{ steps.cache-libmicrohttpd.outputs.cache-hit != 'true' }}
      run: |
        curl -OL https://ftpmirror.gnu.org/libmicrohttpd/libmicrohttpd-latest-w32-bin.zip
        unzip libmicrohttpd-latest-w32-bin.zip
        mv libmicrohttpd-*-w32-bin/x86_64/MinGW/static/clang64 "$LIBMICROHTTPD_PATH"
        rm -rf libmicrohttpd-latest-w32-bin.zip libmicrohttpd-*-w32-bin

    - name: Check out repository code
      uses: actions/checkout@v5
      with:
        ref: ${{ github.ref }}

    - name: Build
      run: |
        if [ -n "$OPENSSL_PATH" ] && [ -d "$OPENSSL_PATH" ]; then
          export PATH="${OPENSSL_PATH}/bin:${PATH}:/c/msys64"
        fi
        make
        make no_ssl

    - name: Test
      run: |
        if [ -n "$OPENSSL_PATH" ] && [ -d "$OPENSSL_PATH" ]; then
          export PATH="${OPENSSL_PATH}/bin:${PATH}:/c/msys64"
        fi
        make test

  Test-on-macOS:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    needs: Style-Check

    strategy:
      matrix:
        os:
        - macos-latest
        - macos-15-intel
        exclude:
        - os: ${{ (github.event_name == 'push') && (inputs.trigger != 'workflow_call') && 'macos-15-intel' }}

    steps:
    - name: Install build dependencies
      run: |
        brew install openssl@3 libunistring coreutils gnu-sed
        echo "$(brew --prefix coreutils)"'/libexec/gnubin' >> $GITHUB_PATH
        echo "$(brew --prefix gnu-sed)"'/libexec/gnubin' >> $GITHUB_PATH

    - name: Set libmicrohttpd path
      run: |
        ARCH_SUFFIX="$(uname -a | grep -q x86_64 && echo x86_64 || echo arm64)"
        LIBMICROHTTPD_PATH=~/libmicrohttpd-$ARCH_SUFFIX
        echo ARCH_SUFFIX="$ARCH_SUFFIX" >> "$GITHUB_ENV"
        echo LIBMICROHTTPD_PATH="$LIBMICROHTTPD_PATH" >> "$GITHUB_ENV"
        echo CPATH="${LIBMICROHTTPD_PATH}/include" >> "$GITHUB_ENV"
        echo LIBRARY_PATH="${LIBMICROHTTPD_PATH}/lib" >> "$GITHUB_ENV"

    - name: Setup libmicrohttpd
      id: cache-libmicrohttpd
      uses: actions/cache@v4
      with:
        path: ${{ env.LIBMICROHTTPD_PATH }}
        key: libmicrohttpd-macos-${{ env.ARCH_SUFFIX }}

    - name: Build libmicrohttpd
      if: ${{ steps.cache-libmicrohttpd.outputs.cache-hit != 'true' }}
      run: |
        mkdir libmicrohttpd
        cd libmicrohttpd
        curl -OL https://ftpmirror.gnu.org/libmicrohttpd/libmicrohttpd-latest.tar.gz
        tar -xzf libmicrohttpd-latest.tar.gz
        rm libmicrohttpd-latest.tar.gz
        cd libmicrohttpd*
        mkdir "$LIBMICROHTTPD_PATH"
        ./configure --without-gnutls --prefix="$LIBMICROHTTPD_PATH"
        make -j4
        make install
        rm "${LIBMICROHTTPD_PATH}"/lib/libmicrohttpd*.dylib # avoid dynamic linking
        cd ../..
        rm -r libmicrohttpd

    - name: Check out repository code
      uses: actions/checkout@v5
      with:
        ref: ${{ github.ref }}

    - name: Build
      run: |
        make
        make no_ssl

    - name: Test
      run: |
        export TERM=xterm-256color
        make test
